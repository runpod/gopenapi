# Code generated by gopenapi. DO NOT EDIT.
import json
import requests
from dataclasses import dataclass, asdict
from typing import Optional, Dict, Any, Union
from urllib.parse import urljoin


class APIError(Exception):
    """Exception raised for API errors."""
    
    def __init__(self, status_code: int, message: str, response_body: bytes = None):
        self.status_code = status_code
        self.message = message
        self.response_body = response_body
        super().__init__(f"API error {status_code}: {message}")




@dataclass
class GetUserByIdPathParams:
    """Path parameters for getUserById"""
    id: int




@dataclass
class GetUserByIdQueryParams:
    """Query parameters for getUserById"""
    include: Optional[str] = None

    
    def to_dict(self) -> Dict[str, str]:
        """Convert to dictionary for requests"""
        params = {}
        if self.include is not None:
            params["include"] = str(self.include)
        return params



@dataclass
class GetUserByIdHeaderParams:
    """Header parameters for getUserById"""
    authorization: Optional[str] = None

    
    def to_dict(self) -> Dict[str, str]:
        """Convert to dictionary for requests"""
        headers = {}
        if self.authorization is not None:
            headers["Authorization"] = str(self.authorization)
        return headers





@dataclass
class GetUserByIdResponse:
    """Response from getUserById"""
    id: Optional[int] = None
    name: Optional[str] = None
    email: Optional[str] = None

    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "GetUserByIdResponse":
        """Create instance from dictionary"""
        return cls(
            id=data.get("id"),
            name=data.get("name"),
            email=data.get("email"),
        )





















@dataclass
class CreateNewUserRequestBody:
    """Request body for createNewUser"""
    name: str
    email: str

    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization"""
        data = asdict(self)
        # Convert snake_case field names back to original JSON field names
        return {
            "name": data["name"],
            "email": data["email"],
        }



@dataclass
class CreateNewUserResponse:
    """Response from createNewUser"""
    id: Optional[int] = None
    name: Optional[str] = None
    email: Optional[str] = None

    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "CreateNewUserResponse":
        """Create instance from dictionary"""
        return cls(
            id=data.get("id"),
            name=data.get("name"),
            email=data.get("email"),
        )





class ClientClient:
    """HTTP client for the API"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        self.default_headers = {}
    
    def set_header(self, key: str, value: str):
        """Set a default header for all requests"""
        self.default_headers[key] = value
    
    def _make_request(self, method: str, path: str, params: Dict[str, Any] = None, 
                     headers: Dict[str, str] = None, json_data: Any = None) -> requests.Response:
        """Make an HTTP request"""
        url = urljoin(self.base_url, path)
        
        # Merge headers
        request_headers = self.default_headers.copy()
        if headers:
            request_headers.update(headers)
        
        response = self.session.request(
            method=method,
            url=url,
            params=params,
            headers=request_headers,
            json=json_data
        )
        
        if response.status_code >= 400:
            raise APIError(
                status_code=response.status_code,
                message=response.text,
                response_body=response.content
            )
        
        return response


    def get_user_by_id(self, path: GetUserByIdPathParams, query: Optional[GetUserByIdQueryParams] = None, headers: Optional[GetUserByIdHeaderParams] = None) -> GetUserByIdResponse:
        """Retrieve a user by their unique identifier"""
        
        # Build path
        path_str = "/users/{id}"
        path_str = path_str.replace("{id}", str(path.id))

        
        # Build query parameters
        params = {}
        if query:
            params.update(query.to_dict())

        
        # Build headers
        request_headers = {}
        if headers:
            request_headers.update(headers.to_dict())

        
        # Build request body
        json_data = None

        
        response = self._make_request(
            method="GET",
            path=path_str,
            params=params if params else None,
            headers=request_headers if request_headers else None,
            json_data=json_data
        )
        
        if response.content:
            return GetUserByIdResponse.from_dict(response.json())
        return GetUserByIdResponse.from_dict({})



    def list_all_users(self) -> str:
        """Retrieve a list of all users"""
        
        # Build path
        path_str = "/users"

        
        # Build query parameters
        params = {}

        
        # Build headers
        request_headers = {}

        
        # Build request body
        json_data = None

        
        response = self._make_request(
            method="GET",
            path=path_str,
            params=params if params else None,
            headers=request_headers if request_headers else None,
            json_data=json_data
        )
        
        return response.text



    def create_new_user(self, body: Optional[CreateNewUserRequestBody] = None) -> CreateNewUserResponse:
        """Create a new user account"""
        
        # Build path
        path_str = "/users"

        
        # Build query parameters
        params = {}

        
        # Build headers
        request_headers = {}

        
        # Build request body
        json_data = None
        if body:
            json_data = body.to_dict()

        
        response = self._make_request(
            method="POST",
            path=path_str,
            params=params if params else None,
            headers=request_headers if request_headers else None,
            json_data=json_data
        )
        
        if response.content:
            return CreateNewUserResponse.from_dict(response.json())
        return CreateNewUserResponse.from_dict({})


 