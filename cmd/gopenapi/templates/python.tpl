# Code generated by gopenapi. DO NOT EDIT.
import json
import requests
from dataclasses import dataclass, asdict
from typing import Optional, Dict, Any, Union
from urllib.parse import urljoin


class APIError(Exception):
    """Exception raised for API errors."""
    
    def __init__(self, status_code: int, message: str, response_body: bytes = None):
        self.status_code = status_code
        self.message = message
        self.response_body = response_body
        super().__init__(f"API error {status_code}: {message}")


{{range .Operations}}
{{if .HasPathParams}}
@dataclass
class {{.StructName}}PathParams:
    """Path parameters for {{.OperationId}}"""
{{range .PathParams}}    {{.Name | snake_case}}: {{.GoType | python_type}}
{{end}}
{{end}}

{{if .HasQueryParams}}
@dataclass
class {{.StructName}}QueryParams:
    """Query parameters for {{.OperationId}}"""
{{range .QueryParams}}    {{.Name | snake_case}}: Optional[{{.GoType | python_type}}] = None
{{end}}
    
    def to_dict(self) -> Dict[str, str]:
        """Convert to dictionary for requests"""
        params = {}
{{range .QueryParams}}        if self.{{.Name | snake_case}} is not None:
            params["{{.Name}}"] = str(self.{{.Name | snake_case}})
{{end}}        return params
{{end}}

{{if .HasHeaderParams}}
@dataclass
class {{.StructName}}HeaderParams:
    """Header parameters for {{.OperationId}}"""
{{range .HeaderParams}}    {{.Name | snake_case}}: Optional[{{.GoType | python_type}}] = None
{{end}}
    
    def to_dict(self) -> Dict[str, str]:
        """Convert to dictionary for requests"""
        headers = {}
{{range .HeaderParams}}        if self.{{.Name | snake_case}} is not None:
            headers["{{.Name}}"] = str(self.{{.Name | snake_case}})
{{end}}        return headers
{{end}}

{{if .HasRequestBody}}
@dataclass
class {{.StructName}}RequestBody:
    """Request body for {{.OperationId}}"""
{{range .RequestBodyFields}}    {{.Name | snake_case}}: {{.GoType | python_type}}
{{end}}
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization"""
        data = asdict(self)
        # Convert snake_case field names back to original JSON field names
        return {
{{range .RequestBodyFields}}            "{{.Name}}": data["{{.Name | snake_case}}"],
{{end}}        }
{{end}}

{{if .HasResponseBody}}
@dataclass
class {{.StructName}}Response:
    """Response from {{.OperationId}}"""
{{range .ResponseFields}}    {{.Name | snake_case}}: Optional[{{.GoType | python_type}}] = None
{{end}}
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "{{.StructName}}Response":
        """Create instance from dictionary"""
        return cls(
{{range .ResponseFields}}            {{.Name | snake_case}}=data.get("{{.Name}}"),
{{end}}        )
{{end}}

{{end}}


class {{.PackageName | title}}Client:
    """HTTP client for the API"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        self.default_headers = {}
    
    def set_header(self, key: str, value: str):
        """Set a default header for all requests"""
        self.default_headers[key] = value
    
    def _make_request(self, method: str, path: str, params: Dict[str, Any] = None, 
                     headers: Dict[str, str] = None, json_data: Any = None) -> requests.Response:
        """Make an HTTP request"""
        url = urljoin(self.base_url, path)
        
        # Merge headers
        request_headers = self.default_headers.copy()
        if headers:
            request_headers.update(headers)
        
        response = self.session.request(
            method=method,
            url=url,
            params=params,
            headers=request_headers,
            json=json_data
        )
        
        if response.status_code >= 400:
            raise APIError(
                status_code=response.status_code,
                message=response.text,
                response_body=response.content
            )
        
        return response

{{range .Operations}}
    def {{.OperationId | snake_case}}(self{{if .HasPathParams}}, path: {{.StructName}}PathParams{{end}}{{if .HasQueryParams}}, query: Optional[{{.StructName}}QueryParams] = None{{end}}{{if .HasHeaderParams}}, headers: Optional[{{.StructName}}HeaderParams] = None{{end}}{{if .HasRequestBody}}, body: Optional[{{.StructName}}RequestBody] = None{{end}}) -> {{if .HasResponseBody}}{{.StructName}}Response{{else}}str{{end}}:
        """{{.Description}}"""
        
        # Build path
        path_str = "{{.Path}}"
{{if .HasPathParams}}{{range .PathParams}}        path_str = path_str.replace("{{.PathPattern}}", str(path.{{.Name | snake_case}}))
{{end}}{{end}}
        
        # Build query parameters
        params = {}
{{if .HasQueryParams}}        if query:
            params.update(query.to_dict())
{{end}}
        
        # Build headers
        request_headers = {}
{{if .HasHeaderParams}}        if headers:
            request_headers.update(headers.to_dict())
{{end}}
        
        # Build request body
        json_data = None
{{if .HasRequestBody}}        if body:
            json_data = body.to_dict()
{{end}}
        
        response = self._make_request(
            method="{{.Method}}",
            path=path_str,
            params=params if params else None,
            headers=request_headers if request_headers else None,
            json_data=json_data
        )
        
{{if .HasResponseBody}}        if response.content:
            return {{.StructName}}Response.from_dict(response.json())
        return {{.StructName}}Response.from_dict({})
{{else}}        return response.text
{{end}}

{{end}} 